#pragma once
#include "all.h"
#include "pw_modules.h"

typedef struct _RTL_BALANCED_LINKS {
	struct _RTL_BALANCED_LINKS *Parent;
	struct _RTL_BALANCED_LINKS *LeftChild;
	struct _RTL_BALANCED_LINKS *RightChild;
	CHAR Balance;
	UCHAR Reserved[3]; 
} RTL_BALANCED_LINKS, *PRTL_BALANCED_LINKS;

typedef struct _RTL_AVL_TABLE {
	RTL_BALANCED_LINKS BalancedRoot;
	PVOID OrderedPointer;
	ULONG WhichOrderedElement;
	ULONG NumberGenericTableElements;
	ULONG DepthOfTree;
	PRTL_BALANCED_LINKS RestartKey;
	ULONG DeleteCount;
	PVOID CompareRoutine; 
	PVOID AllocateRoutine; 
	PVOID FreeRoutine; 
	PVOID TableContext;
} RTL_AVL_TABLE, *PRTL_AVL_TABLE;

typedef struct _MPW_GENERIC_PRIMARY_CREDENTIAL {
	LSA_UNICODE_STRING UserName;
	LSA_UNICODE_STRING Domaine;
	LSA_UNICODE_STRING Pw;
} MPW_GENERIC_PRIMARY_CREDENTIAL, *PMPW_GENERIC_PRIMARY_CREDENTIAL;

typedef struct _MY_M_MODULES_LIB {
	PW_M_PROCESS_VERY_BASIC_MODULE_INFORMATION Informations;
	BOOL isPresent;
	BOOL isInit;
} MY_M_MODULES_LIB, *PMY_M_MODULES_LIB;

typedef struct _MY_M_MODULES_OS_CONTEXT {
	DWORD MajorVersion;
	DWORD MinorVersion;
	DWORD BuildNumber;
} MY_M_MODULES_OS_CONTEXT, *PMY_M_MODULES_OS_CONTEXT;

typedef struct _MY_M_MODULES_CONTEXT {
	PPW_M_MEMORY_HANDLE hLsMem;
	MY_M_MODULES_OS_CONTEXT osContext;
} MY_M_MODULES_CONTEXT, *PMY_M_MODULES_CONTEXT;

typedef NTSTATUS (* PMY_M_MODULES_ACQUIRE_KEYS_FUNCS) (PMY_M_MODULES_CONTEXT cLs, PPW_M_PROCESS_VERY_BASIC_MODULE_INFORMATION lsLSrvModule);
typedef NTSTATUS (* PMY_M_MODULES_INIT) ();

typedef struct _MY_M_MODULES_LOCAL_HELPER {
	PMY_M_MODULES_INIT initLocalLib;
	PMY_M_MODULES_INIT cleanLocalLib;
	PMY_M_MODULES_ACQUIRE_KEYS_FUNCS AcquireKeys;
	const PLSA_PROTECT_MEMORY * pLProtectMemory;
	const PLSA_PROTECT_MEMORY * pLUnprotectMemory;
} MY_M_MODULES_LOCAL_HELPER, *PMY_M_MODULES_LOCAL_HELPER;

typedef struct _MPW_BASIC_SECURITY_LOGON_SESSION_DATA {
	PMY_M_MODULES_CONTEXT	cLs;
	const MY_M_MODULES_LOCAL_HELPER * lsLocalHelper;
	PLUID						LogonId;
	PLSA_UNICODE_STRING			UserName;
	PLSA_UNICODE_STRING			LogonDomain;
	ULONG						LogonType;
	ULONG						Session;
	PVOID						pCredentials;
	PSID						pSid;
	PVOID						pCredentialManager;
	FILETIME					LogonTime;
	PLSA_UNICODE_STRING			LogonServer;
} MPW_BASIC_SECURITY_LOGON_SESSION_DATA, *PMPW_BASIC_SECURITY_LOGON_SESSION_DATA;

typedef void (CALLBACK * PMY_M_MODULES_EXTERNAL) (IN CONST PLUID luid, IN CONST PUNICODE_STRING username, IN CONST PUNICODE_STRING domain, IN CONST PUNICODE_STRING mpw, IN CONST PBYTE lm, IN CONST PBYTE ntlm, IN OUT LPVOID pvData);
typedef void (CALLBACK * PMY_M_MODULES_ENUM_LOGONDATA) (IN PMPW_BASIC_SECURITY_LOGON_SESSION_DATA pData);
typedef BOOL (CALLBACK * PMY_M_MODULES_ENUM) (IN PMPW_BASIC_SECURITY_LOGON_SESSION_DATA pData, IN OPTIONAL LPVOID pOptionalData);

typedef struct _MY_M_MODULES_PACKAGE {
	//const wchar_t * Name;
	PMY_M_MODULES_ENUM_LOGONDATA CredsForLUIDFunc;
	BOOL isValid;
	const wchar_t * ModuleName;
	MY_M_MODULES_LIB Module;
} MY_M_MODULES_PACKAGE, *PMY_M_MODULES_PACKAGE;

typedef struct _MODULES_PTH_DATA { 
	PLUID		LogonId;
	LPBYTE		NtlmHash;
	LPBYTE		Aes256Key;
	LPBYTE		Aes128Key;
	BOOL		isReplaceOk;
} MODULES_PTH_DATA, *PMODULES_PTH_DATA;